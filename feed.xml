<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-02-26T14:58:44-03:00</updated><id>/feed.xml</id><title type="html">Alexsandro Zanellaâ€™s Blog</title><author><name>Alexsandro Zanella</name></author><entry><title type="html">Building WinForms with Native AOT</title><link href="/building-winforms-nativeaot/" rel="alternate" type="text/html" title="Building WinForms with Native AOT" /><published>2023-02-25T00:00:00-03:00</published><updated>2023-02-25T00:00:00-03:00</updated><id>/building-winforms-nativeaot</id><content type="html" xml:base="/building-winforms-nativeaot/"><![CDATA[<p>Native AOT is incredible, we already know that, but despite microsoft not providing support for WinForms and WPF, they have already said that this is perfectly possible, although easier in Winforms than WPF, they just arenâ€™t in the plans (they still experimented with WinForms , which is much easier, you can check it out <a href="https://devblogs.microsoft.com/dotnet/winforms-enhancements-in-dotnet-7/">here</a> ). These last few weeks Iâ€™ve been working on some projects with Native AOT and this lack of support for visual applications really bothered me, because Iâ€™m really amazed with the benefits of a language compiled in C#, but ok, life goes on.</p>

<h1 id="why-is-winforms-easier-than-wpf">Why is WinForms easier than WPF?</h1>

<p>If you checked out the improvements made to WinForms in .NET 7, you noticed that they already experimented with WinForms, but didnâ€™t mention testing with WPF, this is because WPF uses a lot more reflection, making it much more difficult and laborious to get first working results. In .NET 5, selected Windows Forms built-in COM interops have been replaced with ComWrappers, so built-in COM is completely disabled in trimming/Native AOT scenarios</p>

<h2 id="is-it-really-possible-to-compile-winforms-with-native-aot">Is it really possible to compile WinForms with Native AOT?</h2>

<p>Yes, but with caveats. Officially it is not supported, but microsoft itself mentions the efforts of <a href="https://github.com/kant2002">@kant2002</a>, who made available the WinFormsComInterop library, which allows us to compile Native AOT. Kant claims that over time this library will die, as official support for WinForms is added (I sincerely hope it happens soon). Anyway, itâ€™s still much better than using a beta build of <a href="https://github.com/AvaloniaUI/Avalonia">Avalonia</a> in production, which is what Iâ€™m doing with some projects. Finally, you can use Native AOT + WinForms, but there are still a lot of problems during development that you will have to solve on your own for now, but you can already do a lot with it.</p>

<h2 id="step-by-step">Step by step</h2>

<p>With your WinForms .NET 7 project already created:</p>

<ul>
  <li>
    <p>Add the WinFormsComInterop package through Nuget, or run the command <code class="language-plaintext highlighter-rouge">dotnet add package WinFormsComInterop</code></p>
  </li>
  <li>
    <p>In the Program.cs file, add <code class="language-plaintext highlighter-rouge">ComWrappers.RegisterForMarshalling(WinFormsComInterop.WinFormsComWrappers.Instance);</code> at your program startup. It will look like this:</p>
  </li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">WinFormsAOT_example</span>
<span class="p">{</span>
    <span class="k">internal</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">STAThread</span><span class="p">]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ComWrappers</span><span class="p">.</span><span class="nf">RegisterForMarshalling</span><span class="p">(</span><span class="n">WinFormsComInterop</span><span class="p">.</span><span class="n">WinFormsComWrappers</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
            <span class="n">ApplicationConfiguration</span><span class="p">.</span><span class="nf">Initialize</span><span class="p">();</span>
            <span class="n">Application</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="k">new</span> <span class="nf">Form1</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>Now enable Native AOT in your project by adding <code class="language-plaintext highlighter-rouge">&lt;PublishAot&gt;true&lt;/PublishAot&gt;</code> in your project file;</p>
  </li>
  <li>
    <p>By default, if you try to compile now, you will get an error saying that WinForms does not support trimming. To fix this, also add <code class="language-plaintext highlighter-rouge">&lt;_SuppressWinFormsTrimError&gt;true&lt;/_SuppressWinFormsTrimError&gt;</code> in your project file</p>
  </li>
  <li>
    <p>If using in a new project, your project file should look like this example:</p>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;OutputType&gt;</span>WinExe<span class="nt">&lt;/OutputType&gt;</span>
    <span class="nt">&lt;TargetFramework&gt;</span>net7.0-windows<span class="nt">&lt;/TargetFramework&gt;</span>
    <span class="nt">&lt;Nullable&gt;</span>enable<span class="nt">&lt;/Nullable&gt;</span>
    <span class="nt">&lt;UseWindowsForms&gt;</span>true<span class="nt">&lt;/UseWindowsForms&gt;</span>
    <span class="nt">&lt;ImplicitUsings&gt;</span>enable<span class="nt">&lt;/ImplicitUsings&gt;</span>
    <span class="nt">&lt;PublishAot&gt;</span>true<span class="nt">&lt;/PublishAot&gt;</span>
    <span class="nt">&lt;_SuppressWinFormsTrimError&gt;</span>true<span class="nt">&lt;/_SuppressWinFormsTrimError&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"WinFormsComInterop"</span> <span class="na">Version=</span><span class="s">"0.4.3"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>

<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<ul>
  <li>Now your project is ready to be published with Native AOT ðŸ˜„</li>
</ul>

<font size="3">
<a href="https://github.com/AlexsandroZanella2/winforms-nativeaot-example">Download the sample project here</a> </font>]]></content><author><name>Alexsandro Zanella</name></author><summary type="html"><![CDATA[Native AOT is incredible, we already know that, but despite microsoft not providing support for WinForms and WPF, they have already said that this is perfectly possible, although easier in Winforms than WPF, they just arenâ€™t in the plans (they still experimented with WinForms , which is much easier, you can check it out here ). These last few weeks Iâ€™ve been working on some projects with Native AOT and this lack of support for visual applications really bothered me, because Iâ€™m really amazed with the benefits of a language compiled in C#, but ok, life goes on.]]></summary></entry></feed>